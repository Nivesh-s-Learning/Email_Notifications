name: Monitor Organization Commit Activity

on:
    push:
      branches:
        - main  # Trigger workflow on push events to the main branch
    workflow_dispatch:

jobs:
            monitor_commit_activity:
              runs-on: ubuntu-latest
          
              steps:
                - name: Fetch Organization Members
                  id: fetch_members
                  run: |
                    members=()
                    page=1
                    while true; do
                      response=$(curl -s -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" \
                                 "https://api.github.com/orgs/Nivesh-s-Learning/members?page=$page&per_page=100")
                      current_members=$(echo "$response" | jq -r '.[].login')
                      members+=($current_members)
                      if [[ -z $current_members ]]; then
                        break
                      fi
                      ((page++))
                    done
                    echo "::set-output name=members::${members[@]}"
                  
                - name: Iterate Over Members and Get Latest Commit
                  id: iterate_members
                  run: |
                    members=(${{ steps.fetch_members.outputs.members }})
                    for member in "${members[@]}"; do
                      latest_commit=$(curl -s -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" \
                                      "https://api.github.com/users/$member/events" | \
                                      jq -r 'map(select(.type=="PushEvent")) | .[0].created_at')
                      echo "Latest commit by $member: $latest_commit"
                    done  
                      # Add logic to calculate time difference and send email notification based on your requirements

                - name: Fetch Email IDs for Members
                  id: fetch_emails
                  run: |
                        members=(${{ steps.fetch_members.outputs.members }})
                        emails=()
                        for member in "${members[@]}"; do
                          response=$(curl -s -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" \
                                     "https://api.github.com/users/$member")
                          if [[ ! "$response" =~ "email" ]]; then
                            echo "Error retrieving email for user: $member"
                          else
                            email=$(echo "$response" | jq -r '.email')
                            if [ "$email" != "null" ]; then
                              emails+=("$email")
                            else
                              echo "Email not found for user: $member"
                            fi
                          fi
                        done
                        echo "::set-output name=emails::${emails[@]}"
                    
