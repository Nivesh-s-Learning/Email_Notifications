name: Monitor Organization Commit Activity

on:
  push:
    branches:
      - main  # Trigger workflow on push events to the main branch
  workflow_dispatch:

jobs:
  monitor_commit_activity:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set Static List of Members
        id: set_members
        run: |
          members=(anantsinghal47 mitul-garg Nivesh108 Samarthsharma9) # Replace with actual member usernames
          echo "MEMBERS=${members[*]}" >> $GITHUB_ENV

      - name: Iterate Over Repositories and Branches
        id: iterate_repos
        run: |
          repos=(Email_Notification mitul-testing)
          members=($MEMBERS)
          echo "Repositories to iterate: ${repos[@]}"
          echo "Members to check: ${members[@]}"

          current_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          one_day_ago=$(date -u -d "24 hours ago" +%Y-%m-%dT%H:%M:%SZ)
          echo "Current time: $current_time"
          echo "One day ago: $one_day_ago"

          declare -A latest_commit_times

          for repo in "${repos[@]}"; do
            page=1
            while true; do
              branches=$(curl -s -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" \
                "https://api.github.com/repos/OptumHomeCommunity/$repo/branches?page=$page&per_page=100" | jq -r '.[].name')
              if [[ -z "$branches" ]]; then
                break
              fi

              for branch in $branches; do
                echo "Checking commits for branch: $branch"
                commit_page=1
                while true; do
                  response=$(curl -s -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" \
                    "https://api.github.com/repos/OptumHomeCommunity/$repo/commits?sha=$branch&since=$one_day_ago&page=$commit_page&per_page=100")
                  if [[ -z "$response" ]]; then
                    echo "No commits found for branch: $branch"
                    break
                  fi

                  commits=$(echo "$response" | jq -c '.[]' || echo "[]")
                  if [[ -z "$commits" ]]; then
                    break
                  fi

                  for commit in $commits; do
                    commit_time=$(echo $commit | jq -r '.commit.author.date')
                    author=$(echo $commit | jq -r '.author.login')
                    if [[ -n "$commit_time" && " ${members[@]} " =~ " ${author} " ]]; then
                      commit_time_epoch=$(date -d "$commit_time" +%s)
                      if [[ -z "${latest_commit_times[$author]}" || $commit_time_epoch -gt ${latest_commit_times[$author]} ]]; then
                        latest_commit_times[$author]=$commit_time_epoch
                      fi
                    fi
                  done
                  ((commit_page++))
                done
              done
              ((page++))
            done
          done

          inactive_members=()
          current_time_epoch=$(date -d "$current_time" +%s)
          for member in "${members[@]}"; do
            if [[ -z "${latest_commit_times[$member]}" || $((current_time_epoch - latest_commit_times[$member])) -ge 86400 ]]; then
              inactive_members+=("$member")
            fi
          done

          echo "Inactive members: ${inactive_members[@]}"
          echo "::set-output name=inactive_members::$(IFS=,; echo "${inactive_members[*]}")"

      - name: Fetch Email IDs for Members
        id: fetch_emails
        run: |
          inactive_members=(${{ steps.iterate_repos.outputs.inactive_members }})
          emails=()
          for member in "${inactive_members[@]}"; do
            response=$(curl -s -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" \
              "https://api.github.com/users/$member")
            email=$(echo "$response" | jq -r '.email')
            if [ "$email" != "null" ]; then
              emails+=("$email")
            else
              echo "Email not found for user: $member"
            fi
          done
          echo "EMAILS=${emails[*]}" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Send Email Notifications
        run: |
          python send_email.py
        env:
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          EMAILS: ${{ env.EMAILS }}
